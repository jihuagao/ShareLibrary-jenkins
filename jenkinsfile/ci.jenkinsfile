#!groovy
@Library('jenkinslibrary@master') _

def build = new org.devops.build()
def tools = new org.devops.tools()
def sonar = new org.devops.sonarqube()

String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"

pipeline{
    agent any
    options{
        timestamps()
        timeout(time:2,unit:'HOURS')
    }
    stages{
        stage("CheckOut"){
            steps{
                script{
                    println("${branchName}")
                    tools.PrintMes("获取代码","green")
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], 
                              doGenerateSubmoduleConfigurations: false, 
                              extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: false, timeout: 60]], 
                              submoduleCfg: [], 
                              userRemoteConfigs: [[credentialsId: '9bda85f5-71b5-4b92-bbe9-d1031774f13c', url: "${srcUrl}"]]])
                }
            }
        }

        stage("Build"){
            steps{
                script{
                    println("${projectName}")
                    tools.PrintMes("执行打包","green")
                    build.Build(buildType,buildShell)
                }
            }
        }
        
        stage("QA"){
            steps{
                script{
                    tools.PrintMes("代码扫描","green")
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src")
                }
            }
        }

    }
}
